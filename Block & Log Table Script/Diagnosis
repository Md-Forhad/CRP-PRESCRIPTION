--Diagnosis
ALTER TABLE DIAGNOSIS_MST_BLOCK DROP PRIMARY KEY CASCADE;

DROP TABLE DIAGNOSIS_MST_BLOCK CASCADE CONSTRAINTS;

CREATE TABLE DIAGNOSIS_MST_BLOCK (
  DMB_ID                NUMBER(20)                  NOT NULL,
  DMB_DM_ID             NUMBER(10),
  DMB_DOC_ID            NUMBER(20),
  DMB_CID_ID            NUMBER(10),
  DMB_ENTRY_BY          VARCHAR2(30),
  DMB_ENTRY_TIME        DATE DEFAULT SYSDATE
);

CREATE UNIQUE INDEX DIAGNOSIS_MST_BLOCK_PK ON DIAGNOSIS_MST_BLOCK (DMB_ID);

CREATE OR REPLACE TRIGGER DM_BLOCK_PRE_INSERT
BEFORE INSERT ON DIAGNOSIS_MST_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(DMB_ID),0) + 1
    INTO :NEW.DMB_ID
    FROM DIAGNOSIS_MST_BLOCK;
END;
/

-----------------------------------LOG START------------------------------------
ALTER TABLE DIAGNOSIS_MST_BLOCK_LOG DROP PRIMARY KEY CASCADE;

DROP TABLE DIAGNOSIS_MST_BLOCK_LOG CASCADE CONSTRAINTS;

CREATE TABLE DIAGNOSIS_MST_BLOCK_LOG (
  DMB_LOG_ID            NUMBER           NOT NULL,
  DMB_ID                NUMBER(20),
  DMB_DM_ID             NUMBER(10),
  DMB_DOC_ID            NUMBER(20),
  DMB_CID_ID            NUMBER(10),
  DMB_ENTRY_BY          VARCHAR2(30),
  DMB_ENTRY_TIME        DATE,
  DMB_LOG_TIME          VARCHAR2(30),
  DMB_LOG_STATUS        VARCHAR2(10)
);

CREATE UNIQUE INDEX DIAGNOSIS_MST_BLOCK_LOG_PK ON DIAGNOSIS_MST_BLOCK_LOG (DMB_LOG_ID);

CREATE OR REPLACE TRIGGER DM_BLOCK_LOG_PRE_INS
BEFORE INSERT ON DIAGNOSIS_MST_BLOCK_LOG
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(DMB_LOG_ID),0) + 1
    INTO :NEW.DMB_LOG_ID
    FROM DIAGNOSIS_MST_BLOCK_LOG;
END;
/

ALTER TABLE DIAGNOSIS_MST_BLOCK_LOG ADD (
  CONSTRAINT DIAGNOSIS_MST_BLOCK_LOG_PK PRIMARY KEY (DMB_LOG_ID)
  USING INDEX DIAGNOSIS_MST_BLOCK_LOG_PK ENABLE VALIDATE);
---------------------------------------LOG END----------------------------------


CREATE OR REPLACE TRIGGER DM_BLOCK_AUDIT
BEFORE INSERT OR UPDATE OR DELETE
ON DIAGNOSIS_MST_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
    STATUS VARCHAR2(10);
BEGIN
    IF INSERTING OR UPDATING THEN
        IF INSERTING THEN STATUS := 'INSERT';
        ELSIF UPDATING THEN STATUS := 'UPDATE';
        END IF;
		
        INSERT INTO DIAGNOSIS_MST_BLOCK_LOG (DMB_ID, 
                                          DMB_DM_ID, 
                                          DMB_DOC_ID, 
                                          DMB_CID_ID, 
                                          DMB_ENTRY_BY, 
                                          DMB_ENTRY_TIME, 
                                          DMB_LOG_TIME, 
                                          DMB_LOG_STATUS)
        VALUES (:NEW.DMB_ID, 
                :NEW.DMB_DM_ID, 
                :NEW.DMB_DOC_ID, 
                :NEW.DMB_CID_ID, 
                :NEW.DMB_ENTRY_BY, 
                :NEW.DMB_ENTRY_TIME,  
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    ELSE
        STATUS := 'DELETE';
        INSERT INTO DIAGNOSIS_MST_BLOCK_LOG (DMB_ID,
                                          DMB_DM_ID, 
                                          DMB_DOC_ID, 
                                          DMB_CID_ID, 
                                          DMB_ENTRY_BY, 
                                          DMB_ENTRY_TIME, 
                                          DMB_LOG_TIME, 
                                          DMB_LOG_STATUS)
        VALUES (:OLD.DMB_ID,
                :OLD.DMB_DM_ID, 
                :OLD.DMB_DOC_ID, 
                :OLD.DMB_CID_ID, 
                :OLD.DMB_ENTRY_BY, 
                :OLD.DMB_ENTRY_TIME, 
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    END IF;
END;
/

ALTER TABLE DIAGNOSIS_MST_BLOCK ADD (
  CONSTRAINT DIAGNOSIS_MST_BLOCK_PK PRIMARY KEY (DMB_ID)
  USING INDEX DIAGNOSIS_MST_BLOCK_PK ENABLE VALIDATE);
