--Medication
ALTER TABLE MEDICATION_MST_BLOCK DROP PRIMARY KEY CASCADE;

DROP TABLE MEDICATION_MST_BLOCK CASCADE CONSTRAINTS;

CREATE TABLE MEDICATION_MST_BLOCK (
  MMB_ID                 NUMBER(20)           NOT NULL,
  MMB_MEDICATION_ID      NUMBER(10),
  MMB_DOC_ID             NUMBER(20),
  MMB_ENTRY_BY           VARCHAR2(30),
  MMB_ENTRY_TIME         DATE DEFAULT SYSDATE
);

CREATE UNIQUE INDEX MEDICATION_MST_BLOCK_PK ON MEDICATION_MST_BLOCK (MMB_ID);

CREATE OR REPLACE TRIGGER MEDICATION_BLOCK_PRE_INSERT
BEFORE INSERT ON MEDICATION_MST_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(MMB_ID),0) + 1
    INTO :NEW.MMB_ID
    FROM MEDICATION_MST_BLOCK;
END;
/

-----------------------------------LOG START------------------------------------
ALTER TABLE MEDICATION_MST_BLOCK_LOG DROP PRIMARY KEY CASCADE;

DROP TABLE MEDICATION_MST_BLOCK_LOG CASCADE CONSTRAINTS;

CREATE TABLE MEDICATION_MST_BLOCK_LOG (
  MMB_LOG_ID             NUMBER           NOT NULL,
  MMB_ID                 NUMBER(20),
  MMB_MEDICATION_ID      NUMBER(10),
  MMB_DOC_ID             NUMBER(20),
  MMB_ENTRY_BY           VARCHAR2(30),
  MMB_ENTRY_TIME         DATE,
  MMB_LOG_TIME           VARCHAR2(30),
  MMB_LOG_STATUS         VARCHAR2(10)
);

CREATE UNIQUE INDEX MEDICATION_MST_BLOCK_LOG_PK ON MEDICATION_MST_BLOCK_LOG (MMB_LOG_ID);

CREATE OR REPLACE TRIGGER MEDICATION_BLOCK_AUDIT
BEFORE INSERT ON MEDICATION_MST_BLOCK_LOG
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(MMB_LOG_ID),0) + 1
    INTO :NEW.MMB_LOG_ID
    FROM MEDICATION_MST_BLOCK_LOG;
END;
/

ALTER TABLE MEDICATION_MST_BLOCK_LOG ADD (
  CONSTRAINT MEDICATION_MST_BLOCK_LOG_PK PRIMARY KEY (MMB_LOG_ID)
  USING INDEX MEDICATION_MST_BLOCK_LOG_PK ENABLE VALIDATE);
---------------------------------------LOG END----------------------------------


CREATE OR REPLACE TRIGGER MEDICATION_BLOCK_PRE_INSERT
BEFORE INSERT OR UPDATE OR DELETE
ON MEDICATION_MST_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
    STATUS VARCHAR2(10);
BEGIN
    IF INSERTING OR UPDATING THEN
        IF INSERTING THEN STATUS := 'INSERT';
        ELSIF UPDATING THEN STATUS := 'UPDATE';
        END IF;
		
        INSERT INTO MEDICATION_MST_BLOCK_LOG (MMB_ID,
                                          MMB_MEDICATION_ID, 
                                          MMB_DOC_ID, 
                                          MMB_ENTRY_BY, 
                                          MMB_ENTRY_TIME, 
                                          MMB_LOG_TIME, 
                                          MMB_LOG_STATUS)
        VALUES (:NEW.MMB_ID,
                :NEW.MMB_MEDICATION_ID, 
                :NEW.MMB_DOC_ID, 
                :NEW.MMB_ENTRY_BY, 
                :NEW.MMB_ENTRY_TIME,  
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    ELSE
        STATUS := 'DELETE';
        INSERT INTO MEDICATION_MST_BLOCK_LOG (MMB_ID,
                                          MMB_MEDICATION_ID, 
                                          MMB_DOC_ID, 
                                          MMB_ENTRY_BY, 
                                          MMB_ENTRY_TIME, 
                                          MMB_LOG_TIME, 
                                          MMB_LOG_STATUS)
        VALUES (:OLD.MMB_ID,
                :OLD.MMB_MEDICATION_ID, 
                :OLD.MMB_DOC_ID, 
                :OLD.MMB_ENTRY_BY, 
                :OLD.MMB_ENTRY_TIME, 
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    END IF;
END;
/

ALTER TABLE MEDICATION_MST_BLOCK ADD (
  CONSTRAINT MEDICATION_MST_BLOCK_PK PRIMARY KEY (MMB_ID)
  USING INDEX MEDICATION_MST_BLOCK_PK ENABLE VALIDATE);
