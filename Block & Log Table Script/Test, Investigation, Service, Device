--Test/investigation/service/device
ALTER TABLE PAYMENT_FEE_NAME_BLOCK DROP PRIMARY KEY CASCADE;

DROP TABLE PAYMENT_FEE_NAME_BLOCK CASCADE CONSTRAINTS;

CREATE TABLE PAYMENT_FEE_NAME_BLOCK (
  PFNB_ID                   NUMBER(20)           NOT NULL,
  PFNB_PFN_ID               NUMBER(10),
  PFNB_DOC_ID               NUMBER(20),
  PFNB_CID_ID               NUMBER(10),
  PFNB_ENTRY_BY             VARCHAR2(20),
  PFNB_ENTRY_TIME           VARCHAR2(30)
);

CREATE UNIQUE INDEX PAYMENT_FEE_NAME_BLOCK_PK ON PAYMENT_FEE_NAME_BLOCK (PFNB_ID);

CREATE OR REPLACE TRIGGER PFN_BLOCK_PRE_INSERT
BEFORE INSERT ON PAYMENT_FEE_NAME_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(PFNB_ID),0) + 1
    INTO :NEW.PFNB_ID
    FROM PAYMENT_FEE_NAME_BLOCK;
END;
/

-----------------------------------LOG START------------------------------------
ALTER TABLE PAYMENT_FEE_NAME_BLOCK_LOG DROP PRIMARY KEY CASCADE;

DROP TABLE PAYMENT_FEE_NAME_BLOCK_LOG CASCADE CONSTRAINTS;

CREATE TABLE PAYMENT_FEE_NAME_BLOCK_LOG (
  PFNB_LOG_ID               NUMBER           NOT NULL,
  PFNB_ID                   NUMBER(20),
  PFNB_PFN_ID               NUMBER(10),
  PFNB_DOC_ID               NUMBER(20),
  PFNB_CID_ID               NUMBER(10),
  PFNB_ENTRY_BY             VARCHAR2(20),
  PFNB_ENTRY_TIME           VARCHAR2(30),
  PFNB_LOG_TIME             VARCHAR2(30),
  PFNB_LOG_STATUS           VARCHAR2(10)
);

CREATE UNIQUE INDEX PAYMENT_FEE_NAME_BLOCK_LOG_PK ON PAYMENT_FEE_NAME_BLOCK_LOG (PFNB_LOG_ID);

CREATE OR REPLACE TRIGGER PFN_BLOCK_AUDIT
BEFORE INSERT ON PAYMENT_FEE_NAME_BLOCK_LOG
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(PFNB_LOG_ID),0) + 1
    INTO :NEW.PFNB_LOG_ID
    FROM PAYMENT_FEE_NAME_BLOCK_LOG;
END;
/

ALTER TABLE PAYMENT_FEE_NAME_BLOCK_LOG ADD (
  CONSTRAINT PAYMENT_FEE_NAME_BLOCK_LOG_PK PRIMARY KEY (PFNB_LOG_ID)
  USING INDEX PAYMENT_FEE_NAME_BLOCK_LOG_PK ENABLE VALIDATE);
---------------------------------------LOG END----------------------------------


CREATE OR REPLACE TRIGGER PFN_BLOCK_PRE_INSERT
BEFORE INSERT OR UPDATE OR DELETE
ON PAYMENT_FEE_NAME_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
    STATUS VARCHAR2(10);
BEGIN
    IF INSERTING OR UPDATING THEN
        IF INSERTING THEN STATUS := 'INSERT';
        ELSIF UPDATING THEN STATUS := 'UPDATE';
        END IF;
		
        INSERT INTO PAYMENT_FEE_NAME_BLOCK_LOG (PFNB_ID,
                                          PFNB_PFN_ID,
                                          PFNB_DOC_ID, 
                                          PFNB_CID_ID,
                                          PFNB_ENTRY_BY, 
                                          PFNB_ENTRY_TIME, 
                                          PFNB_LOG_TIME, 
                                          PFNB_LOG_STATUS)
        VALUES (:NEW.PFNB_ID,
                :NEW.PFNB_PFN_ID, 
                :NEW.PFNB_DOC_ID, 
                :NEW.PFNB_CID_ID,
                :NEW.PFNB_ENTRY_BY, 
                :NEW.PFNB_ENTRY_TIME, 
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    ELSE
        STATUS := 'DELETE';
        INSERT INTO PAYMENT_FEE_NAME_BLOCK_LOG (PFNB_ID,
                                          PFNB_PFN_ID,
                                          PFNB_DOC_ID, 
                                          PFNB_CID_ID,
                                          PFNB_ENTRY_BY, 
                                          PFNB_ENTRY_TIME, 
                                          PFNB_LOG_TIME, 
                                          PFNB_LOG_STATUS)
        VALUES (:OLD.PFNB_ID,
                :OLD.PFNB_PFN_ID,
                :OLD.PFNB_DOC_ID,  
                :OLD.PFNB_CID_ID,
                :OLD.PFNB_ENTRY_BY, 
                :OLD.PFNB_ENTRY_TIME, 
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    END IF;
END;
/

ALTER TABLE PAYMENT_FEE_NAME_BLOCK ADD (
  CONSTRAINT PAYMENT_FEE_NAME_BLOCK_PK PRIMARY KEY (PFNB_ID)
  USING INDEX PAYMENT_FEE_NAME_BLOCK_PK ENABLE VALIDATE);
