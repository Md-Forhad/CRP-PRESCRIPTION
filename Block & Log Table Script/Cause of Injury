--Cause of injury
ALTER TABLE INJURY_MST_BLOCK DROP PRIMARY KEY CASCADE;

DROP TABLE INJURY_MST_BLOCK CASCADE CONSTRAINTS;

CREATE TABLE INJURY_MST_BLOCK (
  INJURY_BLOCK_ID           NUMBER(10)              NOT NULL,
  INJURY_ID                 NUMBER(10),
  INJURY_BLOCK_STATUS       NUMBER(2),
  INJURY_DOC_ID             NUMBER(20),
  INJURY_ENTRY_BY           VARCHAR2(30),
  INJURY_ENTRY_TIME         DATE DEFAULT SYSDATE
);

CREATE UNIQUE INDEX INJURY_MST_BLOCK_PK ON INJURY_MST_BLOCK (INJURY_BLOCK_ID);

CREATE OR REPLACE TRIGGER INJURY_BLOCK_PRE_INSERT
BEFORE INSERT ON INJURY_MST_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(INJURY_BLOCK_ID),0) + 1
    INTO :NEW.INJURY_BLOCK_ID
    FROM INJURY_MST_BLOCK;
END;
/

-----------------------------------LOG START------------------------------------
ALTER TABLE INJURY_MST_BLOCK_LOG DROP PRIMARY KEY CASCADE;

DROP TABLE INJURY_MST_BLOCK_LOG CASCADE CONSTRAINTS;

CREATE TABLE INJURY_MST_BLOCK_LOG (
  INJURY_BLOCK_LOG_ID   NUMBER           NOT NULL,
  INJURY_BLOCK_ID       NUMBER(20),
  INJURY_ID             NUMBER(10),
  INJURY_BLOCK_STATUS   NUMBER(2),
  INJURY_DOC_ID         NUMBER(20),
  INJURY_ENTRY_BY       VARCHAR2(30),
  INJURY_ENTRY_TIME     DATE,
  INJURY_LOG_TIME       VARCHAR2(30),
  INJURY_LOG_STATUS     VARCHAR2(10)
);

CREATE UNIQUE INDEX INJURY_MST_BLOCK_LOG_PK ON INJURY_MST_BLOCK_LOG (INJURY_BLOCK_LOG_ID);

CREATE OR REPLACE TRIGGER INJURY_BLOCK_LOG_PRE_INS
BEFORE INSERT ON INJURY_MST_BLOCK_LOG
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
BEGIN
    SELECT NVL(MAX(INJURY_BLOCK_LOG_ID),0) + 1
    INTO :NEW.INJURY_BLOCK_LOG_ID
    FROM INJURY_MST_BLOCK_LOG;
END;
/

ALTER TABLE INJURY_MST_BLOCK_LOG ADD (
  CONSTRAINT INJURY_MST_BLOCK_LOG_PK PRIMARY KEY (INJURY_BLOCK_LOG_ID)
  USING INDEX INJURY_MST_BLOCK_LOG_PK ENABLE VALIDATE);
---------------------------------------LOG END----------------------------------


CREATE OR REPLACE TRIGGER INJURY_BLOCK_AUDIT
BEFORE INSERT OR UPDATE OR DELETE
ON INJURY_MST_BLOCK
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
DECLARE
    STATUS VARCHAR2(10);
BEGIN
    IF INSERTING OR UPDATING THEN
        IF INSERTING THEN STATUS := 'INSERT';
        ELSIF UPDATING THEN STATUS := 'UPDATE';
        END IF;
		
        INSERT INTO INJURY_MST_BLOCK_LOG (INJURY_BLOCK_ID,
                                          INJURY_ID, 
                                          INJURY_BLOCK_STATUS, 
                                          INJURY_DOC_ID, 
                                          INJURY_ENTRY_BY, 
                                          INJURY_ENTRY_TIME, 
                                          INJURY_LOG_TIME, 
                                          INJURY_LOG_STATUS)
        VALUES (:NEW.INJURY_BLOCK_ID,
                :NEW.INJURY_ID, 
                :NEW.INJURY_BLOCK_STATUS, 
                :NEW.INJURY_DOC_ID, 
                :NEW.INJURY_ENTRY_BY, 
                :NEW.INJURY_ENTRY_TIME,  
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    ELSE
        STATUS := 'DELETE';
        INSERT INTO INJURY_MST_BLOCK_LOG (INJURY_BLOCK_ID,
                                          INJURY_ID, 
                                          INJURY_BLOCK_STATUS, 
                                          INJURY_DOC_ID, 
                                          INJURY_ENTRY_BY, 
                                          INJURY_ENTRY_TIME, 
                                          INJURY_LOG_TIME, 
                                          INJURY_LOG_STATUS)
        VALUES (:OLD.INJURY_BLOCK_ID,
                :OLD.INJURY_ID, 
                :OLD.INJURY_BLOCK_STATUS, 
                :OLD.INJURY_DOC_ID, 
                :OLD.INJURY_ENTRY_BY, 
                :OLD.INJURY_ENTRY_TIME, 
                TO_CHAR(SYSDATE,'DD/MM/RRRR HH12:MI:SS AM'),
                STATUS);
    END IF;
END;
/

ALTER TABLE INJURY_MST_BLOCK ADD (
  CONSTRAINT INJURY_MST_BLOCK_PK PRIMARY KEY (INJURY_BLOCK_ID)
  USING INDEX INJURY_MST_BLOCK_PK ENABLE VALIDATE);
